[[plugins]]
repo = "fatih/vim-go"
on_ft = 'go'
hook_add = '''
  let g:go_list_type = "quickfix"
  let g:go_test_timeout = '10s'
  let g:go_fmt_autosave = 1
  let g:go_fmt_command = "goimports"
  " vaf,dafなどfunction全体への操作にコメントを含めるか
  let g:go_textobj_include_function_doc = 0
  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_function_calls = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraings = 1
  "let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
  let g:go_metalinter_deadline = "5s"

  " run :GoBuild or :GoTestCompile based on the go file
  function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
      call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
      call go#cmd#Build(0)
    endif
  endfunction

  map <leader>n :cnext<CR>
  map <leader>p :cprevious<CR>
  nnoremap <leader>q :cclose<CR>

  augroup go
    autocmd!
    autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
    "autocmd FileType go nmap <leader>b  <Plug>(go-build)
    autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
    autocmd FileType go nmap <leader>r  <Plug>(go-run-split)
    "autocmd FileType go nmap [gotest] <Plug>(go-test)
    autocmd FileType go nmap <leader>T <Plug>(go-test)
    "autocmd FileType go nmap [gotest]c <Plug>(go-test-compile)
    autocmd FileType go nmap <leader>Tc <Plug>(go-test-compile)
    "autocmd FileType go nmap <leader>c  <Plug>(go-coverage)
    "autocmd FileType go nmap <leader>cc <Plug>(go-coverage-clear)
    autocmd FileType go nmap <leader>ct <Plug>(go-coverage-toggle)
    autocmd FileType go nmap <leader>cb <Plug>(go-coverage-browser)
    autocmd FileType go nmap <leader>def <Plug>(go-def-split)
    autocmd FileType go nmap <leader>doc <Plug>(go-doc-split)
  augroup END
'''

[[plugins]]
repo = 'mdempsky/gocode'

# for Go structs
[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'SirVer/ultisnips'
